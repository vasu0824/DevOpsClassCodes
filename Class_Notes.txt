
########################
Day 2 - 19th Mar. 2024
########################

	DevOps LifeCycle :::
	
		DevOps Pipeline :
		
		Developer
		
		Coding 	--> Build	--> Create Artifacts	--> Unit Testing --> Deploy to QA --> QA Testing --> UAT --> UAT Testing 	--> Deploy to Prod --> Monitor 
		
	Infra-Structure Provisioning and Configurations :::
	
		To Automate Server Provisioning & Configuration using Ansible/Terraform
		
		Coding --> SCM_Checkout --> Provisioning(Using Terraform) --> Configuration(Using Ansible)
		
		
	Pipeline 1: 
	
		Coding --> SCM_Checkout --> Provisioning(Using Terraform) --> Configuration(Using Ansible)
		
	Pipeline 2:
	
		Coding 	--> Build	--> Create Artifacts	--> Unit Testing --> Deploy to QA --> QA Testing --> UAT --> UAT Testing 	--> Deploy to Prod --> Monitor 
		
	
	Continuous Development :::
	
		Version Control System using GIT :
		
		
		Application Project :
		
		Java_web_application: 
		
		Eclipse based IDE 
		
		Java_web_application Folder :
		
			- src/main/java
				sigin.java 
				payment.java 
			- resource 
				index.html
				
				
		file: 
		
		index.html
		
			<html>
			--
			---
			-
			---
			</html>
			
		save - index.html - unit testing 
			
			<html>
			--
			---
			-
			---
			--
			-
			-
			-
			-
			---
			</html>		

		save - index.html - testing 
		
		
		Version Control System: 
		
			- Is used to version control the source changes 
			- Is used to track the changes.
			
			
			<html>
			--
			---
			-
			---
			--
			-
			-
			-
			-
			---
			</html>		

		save - 	index.html_v1.0		- (Tag/Version_Number/Commit_id)
				index.html_v1.1
				index.html_v1.2
				index.html_v1.3
				index.html_v1.4		--> Testing 
					
					
		Types of VCS ::
			
			1. Local VCS 
			2. Centralized VCS
			3. Distributed VCS 
			
			
		GIT ::
		
			- Is a Open-Source Distributed Version Control System 
			- Is used to Version control the source code changes 
			- Is used Track the changes in code 
			- Is used perform parallel development using Branching Techniques
			
		
		Terminologies ::
		
		Local Machine																				Remote Server 
			
		
		git client 
		
		github ( Remote Repository )
		
		Install git client in local Machine ::
		
		In Windows : git bash terminal to work with git.
		
		Git File Workflow :::
		
		Developers' Workload ::
		
			- Enhancement Project / Bug fixing 
			
			- New Project 
			
		
		Local Machine																											Remote Server 
			(Git Client)
			
			Working Directory 	------>		Staging Area		------> 	Local Repository 			------->					Remote Repository
			
			index.html 			  add		index.html			commit			index.html_v1.0
			index.html 			  add		index.html			commit			index.html_v1.1
			index.html 			  add		index.html			commit			index.html_v1.2
			index.html 			  add		index.html			commit			index.html_v1.3			 	Push							index.html_v1.3 
		
		GIT Cli Commands: 
		
		
		
		git clone 		-	Is used to copy/clone the entire remote repository to Local Machine 
		
		git add 		-	Is used to add the changes from working directory to staging area 
		
		git commit 		- 	Is used to permanently commit the changes from staging area to local repository
		
		git push 		- 	Is used to push the changes from local repository to remote repository
		
		git fetch / git pull :
				
				- Both git fetch and pull commands are used to handle the incremental changes from remote repository.
				
				- git fetch :
					- It is just used to check for the incremental changes. If it exist it will bring the incremental change from remote repository to local repository. But it will NEVER update the Working Directory.
					
				- git pull :
					- It is used to check for the incremental changes. If there is any incremental changes exist in remote repository, it will bring the incremental change from remote repository to local repository as well as to the Working Directory.
						
					git pull -> fetch + merge
					
		git init 		- 	Is used to initialize/create a repository in local machine 
							It will create .git directory and a default master/main branch.
							
		Fork 			- 	Is used copy one remote repository to another remote repository
					
					
		- Install Git Cli in Local Machine 

		- Working with Misc. GIT Commands 
		
		- GIT Branching Techniques

		- Remote Repository Handling 
		
			- github 
			- Azure Repository 
			- gitlab
			- AWS Code Commit 
			- bit bucket 
					
		How to Install git in local machine?	https://git-scm.com/downloads
		
			In Windows Machines :
				- GIT BASH	==> git cli commands. 
				- GIT GUI	
				- GIT CMD 
		
		
		Working with GIT Commands :::

			Project Folder Structure :::
			
			d:/EDU_Mar18_DevOps/Repo1 
			
			cd d: 
			mkdir EDU_Mar18_DevOps
			cd EDU_Mar18_DevOps
			mkdir Repo1 
			mkdir Repo2
			
		Local Machine																					
			(Git Client)
			
			Working Directory 	------>		Staging Area		------> 	Local Repository 	

				file1.txt		 add 		file1.txt 			commit 		

			git config ::
			
				Local Configuration			# it is applicable within a specific repository
				
					git config user.name "Loksai"
					git config user.email "Loksai@asdf.com"
				
				
				Global Configuration		# it is applicable to all the repositories
			
					git config --global user.name "Loksai"
					git config --global user.email "Loksai@asdf.com"			
		
		Execute: 
					
			git init 

			git config --global user.name "Loksai"
			git config --global user.email "Loksai@asdf.com"			

			echo "rec1" >> file1.txt 
			
			git add file1.txt
			
			git commit -m "Created file1.txt"
			
			git status
			
			git log 
			
  501  cd d:
  502  mkdir Edu_DevOps_Mar18
  503  cd Edu_DevOps_Mar18/
  504  mkdir ProjectRepo1
  505  cd ProjectRepo1/
  506  pwd
  507  clear
  508  cd ..
  509  mkdir ProjectRepo2
  510  ls
  511  cd ProjectRepo1/
  512  clear
  513  ls
  514  git init
  515  ls
  516  ls -a
  517  cd .git/
  518  ls
  519  cd ..
  520  ls
  521  clear
  522  ls
  523  ls -a
  524  cd .git/
  525  ls
  526  cd ..
  527  clear
  528  git status
  529  ls
  530  echo "Hello"
  531  echo "Record" >> file1.txt
  532  ls
  533  cat file1.txt
  534  git status
  535  git add file1.txt
  536  git status
  537  ls
  538  git commit -m "Created file1.txt"
  539  git log
  540  ls
  541  echo "rec" >> file2.txt
  542  git status
  543  git add file2.txt
  544  git status
  545  git commit -m "Created file2.txt"
  546  git log
  547  git status
  548  clear
  549  git log
  552  git config user.name "Loksai"
  553  git log
  554  echo "rec1" >> file3.txt
  555  git add .
  556  git commit -m "created file3.txt"
  557  git log
  558  cd ..
  559  clear
  560  cd ProjectRepo2
  561  git init
  562  echo "rec" >> f1.txt
  563  git add f1.txt
  564  git commit -m "Created f1.txt"
  565  git log
  566  git status
  567  history
		
########################
Day 3 - 20th Mar. 2024
########################		
				
				
		Git Misc. Commands!
		
		
		GIT ADD :
		
			git add file1.txt 
			
			git add f1.txt f2.txt 
			
			git add *.java 
			
			git add .
					
		
		GIT LOG ::
		
			git log 
			
			git log --oneline 
			
			git log --stat 
			
			git log --oneline -2 
			
		GIT COMMIT ::
		
			Used to make a permanent commit in the repository
			
			git commit -m <Commit_Message>
			
			git commit -m "CR1001/REL1002 - Update payment func."
			
			
		git show <commit_id> 	# review the changes in a specific commit 
		
		git show <commit_id1> <commit_id1> 
		
		git status 
		
		git diff 	- Used to compared the uncommitted changes with the committed changes 
		
		Repo1: 
		
		working dir 	-----> staging area 	--->  Local Repo
		
		Undo/Revert the changes from staging area :

			git rm --cached <file_name>		# Take the changes back to working directory
			
			git rm -f <file_name>			# Permanently remove the file from staging area as well as from working directory
			
		
		Revert/Reset from Local Repository :::
		
		
		GIT RESET :
		
				- It is used to undo the changes from the repository
				- It will move the HEAD Pointer to the previous commit point 
				- It will not create any New Commit Point for tracking the changes 
				
				- It is not recommended to use git reset(--hard)in Shared repository 
				
			Syntax :
			
				git reset <reset_option> <prev_commit_Id>
				
				Git reset option :
				
					--soft :
							It will move the Head pointer back to previous/specific commit point.
							It will take the changes back to staging area from local repository
							The file will be available in staging area as well as in working directory.
							It will never create a new commit point for tracking 
							
							
					
					--mixed 		# Default 
							It will move the Head pointer back to previous/specific commit point.
							It will take the changes back to working directory from local repository
							The file will be available only in working directory.
							It will never create a new commit point for tracking 

							
					--hard 
							It will move the Head pointer back to previous/specific commit point.
							It will permanently remove the changes from local repository as well as working directory
							It will never create a new commit point for tracking 				
		
		
				git reset <commit_id> 		# Perform reset --mixed .
				
				
				git ls-files 		# to get the list of files being tracked by git
			
			
		git revert :::
		
			- git revert is same as git reset --hard, because it a permanent deletion.
			
			- It is used to undo the specific commit 

			- Only difference is git revert will create a new commit point for tracking purpose
				- But, git reset will not have any new commit point. 
				
			- It is always recommended to use git revert in the shared repository
			
			git revert <commit_id> 
			
			
		git ignore :::
		
			- Is used to ignore the file from tracking by git.
			
			- create .gitignore file in the repo 
			
			- .gitignore should be the very first commit as a best practise.
		
		Local Machine:													====> 			Remote Repo.
		
		Java_web_application
		
			src/
				sign.java
				payment.java 
				index.jsp 
				index_testcase1.java 
			target/
				*.war
				*.jar 
			App_properties 
				complier_options
				Envi_variables
			secret 
			db_credentials 
			
  506  mkdir repo1
  507  cd repo1/
  508  git init
  509  git status
  510  echo "rec1" >> f1.txt
  511  git add f1.txt
  512  git commit -m "Created f1.txt"
  513  clear
  514  git log
  515  ls
  516  echo "rec1" >> f2.txt
  517  git add f2.txt
  518  echo "rec1" >> f3.txt
  519  git add f3.txt
  520  git status
  521  echo "rec1" >> s1.txt
  522  echo "rec1" >> q1.java
  523  echo "rec1" >> q2.java
  524  echo "rec1" >> l1.html
  525  echo "rec1" >> l2.html
  526  echo "rec1" >> s1.doc
  527  echo "rec1" >> e1.md
  528  clear
  529  ls
  530  git status
  531  git add e1.md l1.html
  532  git status
  533  git add *.java
  534  git status
  535  git add .
  536  git status
  537  git commit -m "Created some files"
  538  git status
  539  git log
  540  clear
  541  git log
  542  git log --oneline
  543  git log --oneline
  544  git show 3a1e997
  545  clear
  546  git log --oneline
  547  echo "rec1" >> l1.java
  548  git add .
  549  git commit -m "created l1.java"
  550  echo "rec1" >> l2.java
  551  git add .
  552  git commit -m "created l2.java"
  553  echo "rec1" >> l3.java
  554  git add .
  555  git commit -m "created l3.java"
  556  echo "rec1" >> l4.java
  557  git add .
  558  git commit -m "created l4.java"
  559  git commit -m "created l5.java"
  560  echo "rec1" >> l5.java
  561  git add .
  562  git commit -m "created l5.java"
  563  clear
  564  git log
  565  clear
  566  git log
  567  clear
  568  git log --oneline
  569  git log --oneline -2
  570  git log --oneline -3
  571  clear
  572  git log -2
  573  git log --stat -2
  574  git log --stat -1
  575  git log --stat
  576  clear
  577  git log --oneline
  578  git status
  579  cd ..
  580  cd repo1/
  581  clear
  582  ls
  583  cat e1.md
  584  echo "rec2" >> e1.md
  585  echo "rec3" >> e1.md
  586  cat e1.md
  587  git status
  588  git diff
  589  git add .
  590  git commit -m "updated e1.md"
  591  c
  592  clear
  593  ls
  594  git status
  595  cd ..
  596  mkdir repo2
  597  cd repo2
  598  git init
  599  clear
  600  ls
  601  echo "rec1" >> f1.txt
  602  git add .
  603  git status
  604  git rm --cached f1.txt
  605  git status
  606  ls
  607  git add .
  608  echo "rec1" >> f2.txt
  609  echo "rec1" >> f3.txt
  610  echo "rec1" >> f4.txt
  611  echo "rec1" >> f5.txt
  612  echo "rec1" >> f5.java
  613  clear
  614  git status
  615  git add .
  616  clear
  617  git status
  618  git rm --cached f1.txt
  619  git rm --cached f5.txt f5.java
  620  git status
  621  git add .
  622  clear
  623  git status
  624  git rm -f f5.java
  625  git status
  626  ls
  627  git commit -m "Created"
  628  clear
  629  git log
  630  clear
  631  cd ..
  632  mkdir repo3
  633  cd repo3
  634  clear
  635  git init
  636  echo "rec1" >> s1.txt
  637  git add .
  638  git commit -m "CM1"
  639  echo "rec1" >> s2.txt
  640  git add .
  641  git commit -m "CM2"
  642  echo "rec1" >> s3.txt
  643  git add .
  644  git commit -m "CM3"
  645  echo "rec1" >> s4.txt
  646  git add .
  647  git commit -m "CM4"
  648  echo "rec1" >> s5.txt
  649  git add .
  650  git commit -m "CM5"
  651  clear
  652  ls
  653  git ls-files
  654  echo "rec1" >> s6.txt
  655  git status
  656  ls
  657  git ls-files
  658  git add .
  659  git ls-files
  660  clear
  661  git log --oneline
  662  ls
  663  git ls-files
  664  git status
  665  git commit -m "CM6"
  666  clear
  667  git log --oneline
  668  ls
  669  git ls-files
  670  git status
  671  git reset --soft fffe8a1
  672  git status
  673  ls
  674  git ls-files
  675  git log --oneline
  676  git commit -m "CM6.1"
  677  clear
  678  git log --oneline
  679  ls
  680  git ls-files
  681  git status
  682  git reset --mixed fffe8a1
  683  git status
  684  ls
  685  git ls-files
  686  git log --oneline
  687  git add .
  688  git commit -m "CM6.2"
  689  clear
  690  git log --oneline
  691  ls
  692  git ls-files
  693  git status
  694  git reset --hard fffe8a1
  695  git status
  696  ls
  697  git ls-files
  698  git log --oneline
  699  git reset --hard be4a780
  700  ls
  701  git log --oneline
  702  git reset --hard a7608ad
  703  git log
  704  ls
  705  git ls-files
  706  git status
  707  git log --oneline
  708  clear
  709  clear
  710  ls
  711  git log --oneline
  712  echo "rec1" >> q1.txt
  713  git add .
  714  git commit -m "CM2"
  715  echo "rec1" >> q2.txt
  716  git add .
  717  git commit -m "CM3"
  718  echo "rec1" >> q3.txt
  719  git add .
  720  git commit -m "CM4"
  721  clear
  722  ls
  723  git log -oneline
  724  git log --oneline
  725  git ls-files
  726  git revert 0112f31
  727  git log --oneline
  728  clear
  729  git log --oneline
  730  ls
  731  git show 7ac261f
  732  clear
  733  git log --oneline
  734  git revert 7ac261f
  735  ls
  736  git log --oneline
  737  git reflog
  738  git log
  739  clear
  740  git reflog
  741  git log --oneline
  742  clear
  743  ls
  744  git status
  745  rm s1.txt
  746  ls
  747  clear
  748  git status
  749  git add .
  750  git commit -m "Deleted"
  751  clear
  752  ls
  753  git status
  754  cd ..
  755  mkdir repo4
  756  clear
  757  cd repo4
  758  git init
  759  ls
  760  ls -a
  761  vi .gitignore
  762  git status
  763  git add .
  764  git commit -m "Initial Commit"
  765  clear
  766  ls
  767  ls -a
  768  echo "rec1" >> s1.java
  769  git status
  770  cat .gitignore
  771  echo "rec1" >> sample.txt
  772  git status
  773  ls
  774  echo "rec1" l.war
  775  echo "rec1" >> l.war
  776  git status
  777  ls
  778  cat .gitignore
  779  git add .
  780  git commit -m "CM1"
  781  clear
  782  ls
  783  ls -a
  784  ls
  785  git ls-files
  786  vi .gitignore
  787  git add .
  788  git commit - "asdf"
  789  clear
  790  git status
  791  git commit -m "asdf"
  792  clear
  793  cat .gitignore
  794  vi .gitignore
  795  git status
  796  git commit -m "asdf"
  797  git add .
  798  git commit -m "asdf"
  799  clear
  800  cat .gitignore
  801  ls
  802  cd ..
  803  history
			
Next :
	
	GIT Branching :::				
		
			
########################
Day 4 - 21st Mar. 2024
########################		
			
	GIT Branching Techniques
	
		Branches are the logical copy of Repository.
		
		By default we have master branch 
		
		Repo :
			master : c1,c2,c3		# Considered a production copy.
			
		- Parallel Development
		- Integrity of Master Branch
		
	GIT Branching Strategies:
	
	Scenario 1:
	
		Repo1 :
			master : re1l,rel2,rel3,cm4,cm5

	Scenario 2:
	
		Repo1 :
			master : re1l,rel2,rel3	
						re1l,rel2,rel3,f1cm1,f1cm2				# Upon Merging from feature1
			
				feature1 : re1l,rel2,rel3,f1cm1,f1cm2
				
	Scenario 3:
	
		Repo1 :
			master : re1l,rel2,rel3
						re1l,rel2,rel3,Developer1_Changes		# Upon Merging from Developer1_Branch
						
				Developer1_Branch : re1l,rel2,rel3	
								: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
				
					feature1 : re1l,rel2,rel3,f1cm1,f1cm2
					feature2 : re1l,rel2,rel3,f2cm1,f2cm2

	Scenario 4:
	
		Repo1 :
			master : re1l,rel2,rel3
						re1l,rel2,rel3,Integration_Branch_Changes				# Upon Merging from Intergration_Branch
						
				Intergration_Branch : re1l,rel2,rel3,Developer1_Changes,Developer2_Changes
						
					Developer1_Branch : re1l,rel2,rel3	
									: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
					
						feature1 : re1l,rel2,rel3,f1cm1,f1cm2
						feature2 : re1l,rel2,rel3,f2cm1,f2cm2		
						
					Developer2_Branch : re1l,rel2,rel3	
									: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
					
						feature1 : re1l,rel2,rel3,f1cm1,f1cm2
						feature2 : re1l,rel2,rel3,f2cm1,f2cm2		
						
	Scenario 5:
	
		Repo1 :
			master : re1l,rel2,rel3
						re1l,rel2,rel3,rel4									# rel4 is a integration of Team1 and Team2 Changes.
				
				Release_Branch : re1l,rel2,rel3,Team1_Changes,Team2_Changes
						
					Intergration_Branch1 : re1l,rel2,rel3,Developer1_Changes,Developer2_Changes								# Team1
							
						Developer1_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2		
							
						Developer2_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2

					Intergration_Branch2 : re1l,rel2,rel3,Developer1_Changes,Developer2_Changes								# Team2
							
						Developer1_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2		
							
						Developer2_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2
														
		Create Branches :::
		
			git init - master 
			
				Repo1: 
					master - cm1,cm2,cm3 
					
					feature1 - cm1,cm2,cm3 
								cm1,cm2,cm3,f1cm1,f1cm2  		# Current Branch now 
								
							switch to master 
							
							git merge feature1 		# Merge the changes to target branch.
							
		
			git branch 		# get the list of branches 
			
			git branch feature1 	# Create a new branch feature1 
			
			git switch -c feature2 	# Create a new branch feature2 & Switch to new branch
			
			git checkout -b feature3 # Create a new branch feature3 & Switch to new branch
			
			
			Practise :
			
				git init 
				
				git add 
				
				git commit 
				
				git switch -c 
				
				git add 
				
				git commit 
			
			
				Repo1: 
					master - cm1,cm2,cm3 
					
					feature1 - cm1,cm2,cm3 
								cm1,cm2,cm3,f1cm1 		# Current Branch now 
								
							git switch master 
							
							git merge feature1 			# This command should be executed in Target Branch
							
			Merge :::
			
			Merge Conflict ::
			
				When more than one feature/user try to update the same file at same record in the target branch, we get merge conflict.
	
			Handle/Fix the Merge Conflict :
			
				1. Identify the file(s) causing merge conflict
				2. Open and Review the content of the file 
				3. Decide which feature has to be retained/Deleted from that file 
				4. Update the file according, remove all the unwanted header and footer from the file and save.
				5. Add and Commit the changes in target branch.
				
				
			Prevent Merge Conflict! Process level 
			
		
			git rebase :::
			
				- It is used to key the current branch in-sync with target branch 
				- It is used to prevent the merge conflicts in the target branch
				- It is used to maintain the linear commit history.
				
				- As a best practise we always recommend to use Rebase before merge and keep the current branch in-sync with target.
				
			Working with rebase :::
			
				Repo1 
				
					master - cm1,cm2,cm2 
								cm1,cm2,cm2,f1mc1,f1cm2			# Upon merging from feature1 
								
								cm1,cm2,cm2,f2mc1,f2cm2,f1mc1,f1cm2		# Upon merging from feature2 without Rebase.
								
								cm1,cm2,cm2,f1mc1,f1cm2,f2mc1,f2cm2		# Upon merging from feature2 with Rebase.
					
						feature1 - cm1,cm2,cm2 
						
									cm1,cm2,cm2,f1mc1,f1cm2 
									
									git switch master 
									
									git merge feature1
						
						
						
						feature2 - cm1,cm2,cm2
									cm1,cm2,cm2,f2mc1,f2cm2

									git switch master 
									
									git merge feature2		
									
						~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~			

						feature2 - cm1,cm2,cm2
									cm1,cm2,cm2,f2mc1,f2cm2
									
									git rebase master 
									
									cm1,cm2,cm2,f1mc1,f1cm2,f2mc1,f2cm2	

									git switch master 
									
									git merge feature2		

			
			
			git squash :::
									
					- It is used to combine more than one commits to a single commit point. 	
					
				Repo:
				
					master : cm1,cm2,cm3 
							cm1,cm2,cm3,f1cm1,2,3,4,5,6,7,8,9,..............,100
							
							cm1,cm2,cm3,cm4 			# Upon merge using squash option 
					
					
						feature1 : cm1,cm2,cm3,f1cm1,2,3,4,5,6,7,8,9,..............,100
						
							git switch master 
							git merge feature1 
						
							git merge --squash feature1 
							
							- ask for commit message - cm4

	Scenario 5:
	
		Repo1 :
			master : re1l,rel2,rel3
						re1l,rel2,rel3,rel4									# rel4 is a integration of Team1 and Team2 Changes.
				
				Release_Branch : re1l,rel2,rel3,Team1_Changes,Team2_Changes
						
					Intergration_Branch1 : re1l,rel2,rel3,Developer1_Changes,Developer2_Changes								# Team1
							
						Developer1_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2		
							
						Developer2_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2

					Intergration_Branch2 : re1l,rel2,rel3,Developer1_Changes,Developer2_Changes								# Team2
							
						Developer1_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2		
							
						Developer2_Branch : re1l,rel2,rel3	
										: re1l,rel2,rel3,f1cm1,f1cm2,f2cm1,f2cm2	# Upon Merging from feature1 & feature2
						
							feature1 : re1l,rel2,rel3,f1cm1,f1cm2
							feature2 : re1l,rel2,rel3,f2cm1,f2cm2
							
		
		git cherry-pick <Team1_Changes>			# Execute from target branch
		
		Cherry-Pick is not recommended! 
  316  cd d:
  317  cd Edu_DevOps_Mar18/
  318  clear
  319  ls
  320  mkdir demorepo1
  321  cd demorepo1/
  322  clear
  323  git init
  324  git status
  325  git branch
  326  echo "rec1" >> f1.txt
  327  git add .
  328  git commit -m "cm1"
  329  clear
  330  git branch
  331  git branch feature1
  332  git branch
  333  git switch feature1
  334  git branch
  335  git switch master
  336  clear
  337  git branch
  338  git switch -c feature2
  339  git status
  340  git log
  341  clear
  342  git log --oneline
  343  ls
  344  git switch master
  345  ls
  346  git log --oneline
  347  git checkout -b feature3
  348  git log --oneline
  349  ls
  350  git switch master
  351  clear
  352  git branch
  353  git switch feature1
  354  git log --oneline
  355  ls
  356  echo "rec1" >> s1.txt
  357  git add .
  358  git commit -m "f1cm1"
  359  ls
  360  git log --oneline
  361  git switch master
  362  ls
  363  git log --oneline
  364  git switch feature1
  365  ls
  366  git switch master
  367  ls
  368  git merge feature1
  369  ls
  370  git log --oneline
  371  clear
  372  cd ..
  373  ls
  374  mkdir demorepo2
  375  clear
  376  cd demorepo2
  377  git init
  378  echo "rec1" >> s1.txt
  379  git add .
  380  git commit -m "cm1"
  381  git log -oneline
  382  git log --oneline
  383  ls
  384  git branch feature1
  385  git branch feature2
  386  git branch
  387  git switch feature1
  388  ls
  389  cat s1.txt
  390  echo "rec2 from feature2" >> s1.txt
  391  git status
  392  git add .
  393  git commit -m "f1cm1"
  394  git log --oneline
  395  git switch master
  396  git log --oneline
  397  git switch feature2
  398  ls
  399  cat s1.txt
  400  echo "record2 from feature2" >> s1.txt
  401  git add .
  402  git commit -m "f2c1"
  403  git log --oneline
  404  git switch master
  405  ls
  406  cat s1.txt
  407  git log --oneline
  408  git merge feature1
  409  git log --oneline
  410  cat s1.txt
  411  git merge feature2
  412  clear
  413  git status
  414  cat s1.txt
  415  vi s1.txt
  416  git add .
  417  git commit -m "Updated s1.txt - fixed conflict"
  418  cat s1.txt
  419  git log --oneline
  420  clear
  421  ls
  422  cd ..
  423  mkdir demorepo3
  424  cd demorepo3/
  425  git init
  426  clear
  427  echo "rec1" >> q1.txt
  428  git add .
  429  git commit -m "cm1"
  430  clear
  431  git log --oneline
  432  git branch feature1
  433  git branch feature2
  434  clear
  435  git log --oneline
  436  git switch feature1
  437  ls
  438  echo "rec1" >> w1.txt
  439  git add .
  440  git commit -m "f1cm1"
  441  clear
  442  git switch master
  443  ls
  444  git merge feature1
  445  ls
  446  git log --oneline
  447  git switch feature2
  448  clear
  449  git log --oneline
  450  ls
  451  git rebase master
  452  ls
  453  git log --oneline
  454  echo "rec1" >> l1.txt
  455  git add .
  456  git commit -m "f2cm1"
  457  git log --oneline
  458  git switch master
  459  git merge feature2
  460  cllear
  461  clear
  462  git log --oneline
  463  git switch feature1
  464  ls
  465  git rebase master
  466  ls
  467  clear
  468  ls
  469  git status
  470  git log --oneline
  471  echo "rec1" >> p1.txt
  472  git add .
  473  git commit -m "f1c1"
  474  echo "rec1" >> p2.txt
  475  git add .
  476  git commit -m "f1c2"
  477  echo "rec1" >> p3.txt
  478  git add .
  479  git commit -m "f1c3"
  480  echo "rec1" >> p4.txt
  481  git add .
  482  git commit -m "f1c4"
  483  echo "rec1" >> p5.txt
  484  git add .
  485  git commit -m "f1c5"
  486  clear
  487  git log --oneline
  488  ls
  489  git switch master
  490  git log --oneline
  491  git merge --squash feature1
  492  git status
  493  git commit -m "f1cm2"
  494  git log --oneline
  495  ls
  496  git show b031edc
  497  clear
  498  git switch feature1
  499  git log --oneline
  500  exit
  501  history
  502 useful git commands....
